{"version":3,"sources":["components/colors.js","App.js","serviceWorker.js","index.js"],"names":["palette","colors","concat","CardState","HIDING","SHOWING","MATCHING","assignColors","colorBox","randomIndex","Math","floor","random","length","color","splice","cards","id","cardState","backgroundColor","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","unHide","card","classList","remove","add","hide","updateFirstClick","updatedCard","setState","lastCard","updateState","status","clicked","e","cardList","state","slice","assign","clickedCard","target","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","parseInt","err","return","_this2","deck","map","item","react_default","a","createElement","key","onClick","className","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53739a1a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst palette = [\n  \"#4C5B5C\",\n  \"#FF715B\",\n  \"#F9CB40\",\n  \"#BCED09\",\n  \"#2F52E0\",\n  \"violet\",\n  \"pink\",\n  \"lightskyblue\"\n];\n\nconst colors = [...palette, ...palette];\n\nexport default colors;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport colors from \"./components/colors\";\n\nconst CardState = {\n  HIDING: 0,\n  SHOWING: 1,\n  MATCHING: 2\n};\n\nconst assignColors = colorBox => {\n  //Assign a random color and remove that color from the colors array\n  let randomIndex = Math.floor(Math.random() * colorBox.length);\n  let color = colorBox[randomIndex];\n  colorBox.splice(randomIndex, 1);\n  return color;\n};\nlet colorBox = colors;\nlet cards = [\n  {\n    id: 0,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 1,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 2,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 3,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 4,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 5,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 6,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 7,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 8,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 9,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colorBox)\n  },\n  {\n    id: 10,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colors)\n  },\n  {\n    id: 11,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colors)\n  },\n  {\n    id: 12,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colors)\n  },\n  {\n    id: 13,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colors)\n  },\n  {\n    id: 14,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colors)\n  },\n  {\n    id: 15,\n    cardState: CardState.HIDING,\n    backgroundColor: assignColors(colors)\n  }\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: cards,\n      lastCard: \"\"\n    };\n  }\n\n  unHide = card => {\n    card.classList.remove(\"hidden\");\n    card.classList.add(\"showing\");\n  };\n\n  hide = card => {\n    card.classList.add(\"hidden\");\n    card.classList.remove(\"showing\");\n  };\n\n  updateFirstClick = (cards, updatedCard) => {\n    //Upon First Click of a pairing\n\n    updatedCard.cardState = CardState.SHOWING;\n\n    cards.splice(updatedCard.id, 1, updatedCard);\n\n    this.setState({ cards: cards });\n    this.setState({ lastCard: updatedCard });\n  };\n\n  updateState = (cards, updatedCard, lastCard, status) => {\n    //If clicked card matches last card clicked\n\n    updatedCard.cardState = status === \"HIDDEN\" ? 0 : 2;\n    lastCard.cardState = status === \"HIDDEN\" ? 0 : 2;\n\n    cards.splice(updatedCard.id, 1, updatedCard);\n    cards.splice(lastCard.id, 1, lastCard);\n\n    this.setState({ cards: cards });\n    this.setState({ lastCard: \"\" });\n  };\n\n  clicked = e => {\n    //When a card is clicked\n\n    let cardList = this.state.cards.slice();\n    let lastCard = Object.assign({}, this.state.lastCard);\n    let clickedCard = e.target;\n\n    if (clickedCard.classList[1] === \"hidden\") {\n      // If card is hidden\n      this.unHide(clickedCard);\n\n      for (let card of cardList) {\n        if (card.id === parseInt(clickedCard.id)) {\n          // Find clicked card in state\n\n          if (this.state.lastCard === \"\") {\n            //If click was first click of a pair check\n\n            //Set clicked card to be lastCard and update state\n            this.updateFirstClick(cardList, card);\n          }\n          if (this.state.lastCard !== \"\") {\n            //If click was second click of a pair check\n\n            if (card.backgroundColor === this.state.lastCard.backgroundColor) {\n              // If clicked card matches last card clicked\n\n              //Reset last card and update state with matched last card and updated cardlist\n              this.updateState(cardList, card, lastCard, \"MATCHING\");\n            }\n            if (card.backgroundColor !== this.state.lastCard.backgroundColor) {\n              // If cards don't match\n\n              //Reset pair matching\n              this.updateState(cardList, card, lastCard, \"HIDDEN\");\n\n              //Rehide clicked card\n              this.hide(clickedCard);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  render() {\n    let deck = this.state.cards.slice().map(item => {\n      // Render cards\n\n      if (item.cardState === 1) {\n        return (\n          <div\n            key={item.id}\n            id={item.id}\n            onClick={this.clicked}\n            className=\"card showing\"\n            style={{ backgroundColor: item.backgroundColor }}\n          />\n        );\n      } else if (item.cardState === 2) {\n        return (\n          <div\n            key={parseInt(item.id)}\n            id={item.id}\n            onClick={this.clicked}\n            className=\"card matching\"\n            style={{ backgroundColor: item.backgroundColor }}\n          />\n        );\n      }\n      return (\n        <div\n          key={item.id}\n          id={item.id}\n          onClick={this.clicked}\n          className=\"card hidden\"\n        >\n          <h2>?</h2>\n        </div>\n      );\n    });\n    return (\n      <div className=\"App\">\n        <header>\n          <h2>Match The Cards </h2>\n        </header>\n\n        <div className=\"deck\">{deck}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}